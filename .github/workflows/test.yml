#on:
#  pull_request:
#    branches:
#      - main
#
#jobs:
#  tests:
#    name: Test app
#    runs-on: ubuntu-latest
#    env:
#      POSTGRES_USER: ci
#      POSTGRES_PASSWORD: ci
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-python@v5
#        with:
#          python-version: '3.10'
#          cache: 'pip'
#      - run: pip install --upgrade -r requirements.txt
#      - run: docker compose build
#      - run: docker compose up -d
#      - name: Wait for app to be ready
#        run: |
#          for i in {1..10}; do
#            if curl -s http://127.0.0.1:8002/status; then
#              echo "App is up!"
#              break
#            fi
#            echo "Waiting for app..."
#            sleep 3
#          done
#
#      - run: pytest tests --junit-xml=test-results.xml
#        env:
#          APP_URL: http://127.0.0.1:8002
#
#      - run: docker compose logs app
#        if: always()
#
#      - name: Surface failing tests
#        if: always()
#        uses: pmeier/pytest-results-action@main
#        with:
#          path: test-results.xml
#          summary: true
#          display-options: fEX
#          fail-on-empty: true
#          title: Test results


name: Run Tests

on:
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ci
          POSTGRES_PASSWORD: ci
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start application (Docker Compose)
        run: docker compose up -d --build

      - name: Show running containers
        run: docker compose ps

      - name: Wait for app to be ready
        run: |
          for i in {1..20}; do
            response=$(curl -s http://127.0.0.1:8002/status)
            echo "Response: $response"
            if echo "$response" | grep -q '"database": *true'; then
              echo "✅ App and DB are ready!"
              exit 0
            fi
            echo "⏳ Waiting for app and DB..."
            sleep 3
          done
          echo "❌ App did not become ready"
          docker compose logs
          exit 1

      - name: Run tests
        run: pytest --maxfail=3 --disable-warnings -q

      - name: Show container logs if tests fail
        if: failure()
        run: docker compose logs